---
import { getCurrentLocale, getTranslation } from '../utils/translations';
import SectionHead from './SectionHead.astro';

const locale = getCurrentLocale(Astro.url);
const t = getTranslation(locale);
---

<section id="contact">
  <div class="container">
    <SectionHead 
      title={t.contact.title}
      description={t.contact.description}
    />

    <form id="contact-form">
      <input 
        type="text" 
        name="name" 
        placeholder={t.contact.form.name} 
        required
        minlength="2"
        maxlength="100"
      >
      <input 
        type="tel" 
        name="phone" 
        placeholder={t.contact.form.phone} 
        required
        minlength="7"
        maxlength="20"
      >
      <input 
        type="email" 
        name="email" 
        class="full" 
        placeholder={t.contact.form.email}
        maxlength="255"
      >
      <textarea 
        name="message" 
        class="full" 
        placeholder={t.contact.form.message}
        maxlength="1000"
      ></textarea>
      <div class="full">
        <button class="btn btn-primary" type="submit">{t.contact.form.submit}</button>
        <div class="form-note">{t.contact.form.note}</div>
      </div>
    </form>
  </div>
</section>

<script>
import { CHAT_ID } from "../utils/constants";
import { formatContactMessage, sendTelegramMessage } from "../utils/telegram";

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('contact-form');

  if (!form) return;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const submitButton = form.querySelector('button[type="submit"]');

    if (!submitButton) return;

    try {

      const formData = new FormData(form as HTMLFormElement);

      const {name, phone, email, message} = Object.fromEntries(formData.entries());

      const formattedMessage = formatContactMessage({
        name,
        phone,
        email,
        message,
      });

      const response = await sendTelegramMessage({
        chat_id: CHAT_ID,
        text: formattedMessage,
      });

      if (response) {
        showSuccessNotification('Message sent successfully!');

        form.reset();
      }

    } catch (error) {}
  });

  function showSuccessNotification(message: string) {
    const notification = document.createElement('div');
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #10b981;
      color: white;
      padding: 12px 20px;
      border-radius: 6px;
      z-index: 1000;
      animation: slideIn 0.3s ease-out;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.animation = 'slideOut 0.3s ease-in';

      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);

    }, 3000);
  }

  const style = document.createElement('style');

  style.textContent = `
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOut {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  `;

  document.head.appendChild(style);
});
</script>